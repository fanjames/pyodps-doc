# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, The Alibaba Group Holding Ltd.
# This file is distributed under the same license as the PyODPS package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyODPS 0.7.16\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-11 09:42+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.3\n"

#: ../../source/base-resources.rst:4
msgid "资源"
msgstr ""

#: ../../source/base-resources.rst:6
msgid ""
"`资源 <https://docs.aliyun.com/#/pub/odps/basic/definition&resource>`_ "
"在ODPS上常用在UDF和MapReduce中。"
msgstr ""

#: ../../source/base-resources.rst:8
msgid ""
"列出所有资源还是可以使用 ``list_resources``，判断资源是否存在使用 ``exist_resource``。 删除资源时，可以调用"
" ``delete_resource``，或者直接对于Resource对象调用 ``drop`` 方法。"
msgstr ""

#: ../../source/base-resources.rst:11
msgid "在PyODPS中，主要支持两种资源类型，一种是文件，另一种是表。下面分别说明。"
msgstr ""

#: ../../source/base-resources.rst:14
msgid "文件资源"
msgstr ""

#: ../../source/base-resources.rst:16
msgid "文件资源包括基础的 ``file`` 类型、以及 ``py``、``jar``、``archive``。"
msgstr ""

#: ../../source/base-resources.rst:19
msgid "创建文件资源"
msgstr ""

#: ../../source/base-resources.rst:21
msgid "创建文件资源可以通过给定资源名、文件类型、以及一个file-like的对象（或者是字符串对象）来创建，比如"
msgstr ""

#: ../../source/base-resources.rst:23
msgid ""
"resource = o.create_resource('test_file_resource', 'file', "
"file_obj=open('/to/path/file'))  # 使用file-like的对象\n"
"resource = o.create_resource('test_py_resource', 'py', file_obj='import "
"this')  # 使用字符串"
msgstr ""

#: ../../source/base-resources.rst:29
msgid "读取和修改文件资源"
msgstr ""

#: ../../source/base-resources.rst:31
msgid ""
"对文件资源调用 ``open`` 方法，或者在odps入口调用 ``open_resource`` 都能打开一个资源， 打开后的对象会是file-"
"like的对象。 类似于Python内置的 ``open`` 方法，文件资源也支持打开的模式。我们看例子："
msgstr ""

#: ../../source/base-resources.rst:35
msgid ""
">>> with resource.open('r') as fp:  # 以读模式打开\n"
">>>     content = fp.read()  # 读取全部的内容\n"
">>>     fp.seek(0)  # 回到资源开头\n"
">>>     lines = fp.readlines()  # 读成多行\n"
">>>     fp.write('Hello World')  # 报错，读模式下无法写资源\n"
">>>\n"
">>> with o.open_resource('test_file_resource', mode='r+') as fp:  # "
"读写模式打开\n"
">>>     fp.read()\n"
">>>     fp.tell()  # 当前位置\n"
">>>     fp.seek(10)\n"
">>>     fp.truncate()  # 截断后面的内容\n"
">>>     fp.writelines(['Hello\\n', 'World\\n'])  # 写入多行\n"
">>>     fp.write('Hello World')\n"
">>>     fp.flush()  # 手动调用会将更新提交到ODPS"
msgstr ""

#: ../../source/base-resources.rst:52
msgid "所有支持的打开类型包括："
msgstr ""

#: ../../source/base-resources.rst:54
msgid "``r``，读模式，只能打开不能写"
msgstr ""

#: ../../source/base-resources.rst:55
msgid "``w``，写模式，只能写入而不能读文件，注意用写模式打开，文件内容会被先清空"
msgstr ""

#: ../../source/base-resources.rst:56
msgid "``a``，追加模式，只能写入内容到文件末尾"
msgstr ""

#: ../../source/base-resources.rst:57
msgid "``r+``，读写模式，能任意读写内容"
msgstr ""

#: ../../source/base-resources.rst:58
msgid "``w+``，类似于 ``r+``，但会先清空文件内容"
msgstr ""

#: ../../source/base-resources.rst:59
msgid "``a+``，类似于 ``r+``，但写入时只能写入文件末尾"
msgstr ""

#: ../../source/base-resources.rst:61
msgid ""
"同时，PyODPS中，文件资源支持以二进制模式打开，打开如说一些压缩文件等等就需要以这种模式， 因此 ``rb`` "
"就是指以二进制读模式打开文件，``r+b`` 是指以二进制读写模式打开。"
msgstr ""

#: ../../source/base-resources.rst:65
msgid "表资源"
msgstr ""

#: ../../source/base-resources.rst:68
msgid "创建表资源"
msgstr ""

#: ../../source/base-resources.rst:70
msgid ""
">>> o.create_resource('test_table_resource', 'table', "
"table_name='my_table', partition='pt=test')"
msgstr ""

#: ../../source/base-resources.rst:75
msgid "更新表资源"
msgstr ""

#: ../../source/base-resources.rst:77
msgid ""
">>> table_resource = o.get_resource('test_table_resource')\n"
">>> table_resource.update(partition='pt=test2', "
"project_name='my_project2')"
msgstr ""

#: ../../source/base-resources.rst:83
msgid "获取表及分区"
msgstr ""

#: ../../source/base-resources.rst:85
msgid ""
">>> table_resource = o.get_resource('test_table_resource')\n"
">>> table = table_resource.table\n"
">>> print(table.name)\n"
">>> partition = table_resource.partition\n"
">>> print(partition.spec)"
msgstr ""

#: ../../source/base-resources.rst:94
msgid "读写内容"
msgstr ""

#: ../../source/base-resources.rst:96
msgid ""
">>> table_resource = o.get_resource('test_table_resource')\n"
">>> with table_resource.open_writer() as writer:\n"
">>>     writer.write([0, 'aaaa'])\n"
">>>     writer.write([1, 'bbbbb'])\n"
">>> with table_resource.open_reader() as reader:\n"
">>>     for rec in reader:\n"
">>>         print(rec)"
msgstr ""

